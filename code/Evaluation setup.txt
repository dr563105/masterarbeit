Evaluation setup
-----------------------------
Dataset 1 - First one with just steering and no other training. 100k raw data with no traffic. With 1 centre camera.

Dataset 2 - 100k raw data with traffic and increased wait times at junctions. 

Dataset 3 - 270K raw data with normal waiting times, increased brake scenario, different weather and light conditions, also driving in different map. With segmentation and radar. 

----------------------------

Test scenario 1
----------------
Just steering.
Epsiodes - 30s.
Epoch training - 50
Different light conditions = Early morning(sun behind), Afternoon/evening, Late evening(sun in front). Choose the best light condition and then switch ON traffic. 
---------------
Observation 
---------------
Afternoon and evening had perfect light conditions for that part of the road. All datasets did badly at late evening. Great at afternoon and good at mornings. DS1 and DS3 do well even with traffic. So choosing both.




Test Scenario 2
-----------------
a. DS1 as train data and ds3 as validation data. 
Same test as 1 and only x_test and t_test are changed.
b. DS3 as train and DS1 as test.

---------------
Observation 
---------------
a. training loss decreases but the validation loss stays constant.
b. Same behaviour or even worse.



Test Scenario 3.1 
---------------

setup
------
Loss function as constant and using dataset 1 and 3.

CNN architecture should be same!

MSE - output(accel and steering all regression). Using tanh activation function for both accel and steering.
ts 15. epochs 50. Learning rate 10-4
a)LSTM - 20 hidden units. tanh activation
b)LSTM - 60 hidden units. tanh activation
c)LSTM - 100 hidden units. tanh activation
------------[d)LSTM - 100 hidden units. tanh activation. time series 30.]------------
e)LSTM - 100 hidden units. Sigmoid activation. time series 15. DS1 and 
f)LSTM - 100 hidden units. tanh activation. time series 15. DS3. evaluate_ts15_ds3_2
g)LSTM - 100 hidden units. Sigmoid activation. time series 15. DS3. evaluate_ts15_ds3_3

---------------
Observation 
---------------
a) doesn't accelerate. It is always negative. But giving some throttle, makes it move and positive acceleration prediction happens. Does well even with traffic.
b) Starts to accelerate but stops at random points. 
c)starts to accelerate. Goes and collides at pavements for no reason. Navigates traffic well. 
d) starts well. Brakes and stops at random spots. Navigates traffic just like ts15 and lower lstm units.
e) Works OK. Brakes ok. Nothing special.


-----------------
Test Scenario 3.2
-------------------

Setup
-----
Split accel into positive and negative values - Add another index for negative values. Then use correspondingly for evaluation.
a) ts15. LSTM 100. Sigmoid activation. Learning rate 10-4. DS1. evaluate_ts15_ds1_lstm100Sig1.h5
b)ts15. lstm 100. Sigmoid activation. Learning rate 10-4. DS3. evaluate_ts15_ds3_sig1.h5
c)LSTM - 100 hidden units. Two dense layers for accelerations. Sigmoid activation. DS3. evaluate_ts15_ds3_sig2. Can see that sig2 is converging.

---------------
Observation 
---------------


-----------------
Test Scenario 3.3
-------------------
Regression and classification - input images(center). Output(Accel and steering mse)
a)LSTM 100. DS1. ts15. lr 10-4. Softmax for pos and neg accel and mse for steering. Loss function - binary cross entropy. Model name - evaluate_ts15_ds1_Class1.h5(train4_ds1)

b)LSTM 100. DS3. ts15. lr 10-4. Softmax for pos and neg accel and mse for steering. Loss function - binary cross entropy. Model name - evaluate_ts15_ds3_Class1.h5(train5_ds3)

c)LSTM 100. DS1. ts15. lr 10-4. Softmax for pos and neg accel, no action and mse for steering. Loss function - categorical cross entropy. Model name - evaluate_ts15_ds1_Class2.h5(train5_ds1)

d)LSTM 100. DS3. ts15. lr 10-4. Softmax for pos and neg accel, NO action and mse for steering. Loss function - categorical cross entropy. Model name - evaluate_ts15_ds3_Class2.h5(train6_ds3)

e)LSTM 100. DS3. ts15. lr 10-4. Softmax for pos and neg accel and mse for steering. Loss function - categorical cross entropy. Slight change in dense layers. Seperate dense layers chain for steering and classification. Model name - evaluate_ts15_ds3_Class2_1.h5(train6_ds3)

f)LSTM 100. DS3. ts15. lr 10-4. Softmax for pos and neg accel and mse for steering. Loss function - categorical cross entropy. Change in architecture from LSTM layer. 2 LSTM layers now getting input from flatten layer and having separate dense layers for 
classification and steering. Model name - evaluate_ts15_ds3_Class2_2.h5(train7_ds3)

g)LSTM 100. DS3. ts15. lr 10-4. Softmax for pos and neg accel and mse for steering. Loss function - categorical cross entropy. Change in architecture from LSTM layer. 2 LSTM layers now getting input from flatten layer and having separate dense layers for 
classification and steering. BUT, Using two different NNs. One for acceleration and another for steering.  Model name - evaluate_ts15_ds3_Class3.h5(train8_ds3)

h) Same as f but using only CCE for accel and noaction. Model name - evaluate_ts15_ds3_Class2_3.h5(train7_ds3). Use steering alone model - evaluate_ds3_1.h5

i) same as h but using lr 10-5 and epoch raised to 100.  Model name - evaluate_ts15_ds3_Class2_4lr5.h5(train7_ds3)

---------------
Observation 
---------------



-----------------
Test Scenario 3.4
-------------------
No LSTM vs LSTM 
NO LSTM do new preprocess and train - pp1_ds1 and pp1_ds3
train - evaluate_train1_1_ds1, evaluate_train1_1_ds3
For LSTM use evaluate_ts15_ds1_lstm100.h5 and evaluate_ts15_ds3_2.h5
Compare with episodes.




-----------------
Test Scenario 3.5
-----------------
Predict 3 classes, steering, and Velocity.
Make preprocessing with velocity in it. 
Use model test scenario 3.3 d, e, g and h. Introduce velocity  as another output. 
a) Using 3.3 e - Using train6_ds3 as train9_ds3. Stored as evaluate_ts15_ds3_Class4_1.h5

b) Same as  a) but continuing training for another 50 epochs. Using train9_ds3. Stored as evaluate_ts15_ds3_Class4_11.h5

c) Same as a) but change velocity activation from relu to linear(don't provide any argument to output dense layer). stored as evaluate_ts15_ds3_Class4_12.h5

d)same as c) but continuing for another 50 epochs. stored as evaluate_ts15_ds3_Class4_13.h5

e)Use train7_ds3 architecture of 2separate LSTM layers. Make it three LSTMs for this training, change linear to ReLU and name file as train10_ds3. Save as evaluate_ts15_ds3_Class4_2.h5

f)Same as e) but change to linear. Save as evaluate_ts15_ds3_Class4_21.h5

g) Using 3.3 h -  Using train7_ds3 as train10_ds3. Predict only velocity with activation as relu. Bring together all models at evaluation. Steering from evaluate_ds3_1.h5. 3Classes from evaluate_ts15_ds3_Class2_3.h5. Velocity from this (stored as) evaluate_ts15_ds3_Class4_3.h5.

h) Using 3.3 g - extend train8_ds3 to include velocity as train11_ds3. 3NNs. One each for 3 classes, steering and velocity. Stored as evaluate_ts15_ds3_Class4_4.h5

i) same as e) USe train10_ds3 but use  2 LSTMs. 1LSTM for accel and velocity. 1 for steering. Dense layers after the common LSTM layer. save as evaluate_ts15_ds3_Class4_5.h5 (bad performance)

j) same as e)use train10_ds3 but use 3 LSTMs beneath a common LSTM layer. 1 each for velocity, classification and steering. Store as evaluate_ts15_ds3_Class4_6.h5(good)



Oct 10, 2020
New experiments are conducted for regression task. 
Activation tanh, loss MSE and datasets 1 and 3 mixed. 50k from 1 and 50k from 3.
my_evaluate_train12_ds1_ds3_mix.
1. Use train2_ds3 and do the training. the result was betweek ds1 and ds3 losses. Evaluation - Car moved and navigated really well.
2. Adjusting LSTM layer, dense layers. Evaluation - not great improvement.


==========
Custom losses
==============
a)al;ready done several iterations with 4 lstms. currently, class*1,st*5,vel*0.0001. saved as evaluate_ts15_ds3_Class4_customloss2.h5
b) using 3LSTM architecure as it gets better results. saved as evaluate_ts15_ds3_Class4_customlossnew.h5.


-----------
class 5 -- Conv layers adjustments.
------------
experiment configuring conv layers.
a)Change the features maps. 24, 36, 48, 64, 80, 96 - using 4lstms - 1 followed by 3 lstms. With velocity. Custom losses. saved as evaluate_ts15_ds3_Class5_conv1.h5(train13_ds3_conv1) (15x576)

b)Changing the NN to use 3 lSTMS as it showed better losses. Steering multiplied by 5 and not 10.  saved as evaluate_ts15_ds3_Class5_conv11.h5(train13_ds3_conv1) (15x960)
---
width cnn

c)3lstms  same as b). adjusted last conv layer FM from 64 to 80. Params - (15x1200). Saved as evaluate_ts15_ds3_Class5_conv12.h5(train13_ds3_conv1)

d) Return 64 FM in last layer. Change stride to (1,1). evaluate_ts15_ds3_Class5_conv13.h5(train13_ds3_conv1)(15x3200).
----
Depth cnn

e) increase layers to 11 layers.  11million params. evaluate_ts15_ds3_Class5_conv14.h5(train14_ds3_conv2)
f) reduce to 8 layers. 8m params. evaluate_ts15_ds3_Class5_conv15.h5(train14_ds3_conv2)
g) same as f but changed stride to 2,2 in fm96. It reduces the tensor to (3,5). evaluate_ts15_ds3_Class5_conv16.h5(train14_ds3_conv2)
h)same as e but changed stride to 2,2 in fm96. It reduces the tensor to (3,5). evaluate_ts15_ds3_Class5_conv16.h5(train14_ds3_conv2)
---



---------------------------------------
Depth sensor camera fusion

With and without comparison.
Preprocess with dpeth camera alone. Using histogram version. (my_evaluate_pp6_ds3.py)

a)Standalone - (my_evaluate_train15_ds3_depth.py) stored as evaluate_ts15_ds3_Class6_depth1.h5. Evaluation was BAD.

b)early fusion with RGB-Grayscale. my_evaluate_pp6_ds3. Stored as evaluate_ts15_ds3_Class6_cdepth1.h5[24, 36, 48, 64, 80]

c) Late fusion after 2 conv. layers.my_evaluate_pp6_ds3.py. stored as evaluate_ts15_ds3_Class6_cdepth2.h5 [24, 36], [24, 36], [80,96,96]

==================================
Segmented camera fusion

with and without comparison
preprocess wiht seg images alone as grayscale. 

a) (my_evaluate_train16_ds3_seg.py). store as evaluate_ts15_ds3_Class6_seg1.h5.

b)Early fusion with RGB-Grayscale.my_evaluate_pp7_ds3.py. stored as evaluate_ts15_ds3_Class6_cseg1.h5[24, 36, 48, 64, 80]. Evaluation - Seg fused data does better than depth in both techniques.

c) Late fusion after 2 conv. layers.my_evaluate_pp7_ds3.  Evaluation - Seg fused data does better than depth in both techniques.evaluate_ts15_ds3_Class6_cseg2.h5. [24, 36], [24, 36], [80,96,96]


--------------------------

224609 ds3 data. Trying with RGB-G and Seg images. Include wet and dry weather. USing the same architecture as early fusion. 

a) Preprocessing(my_evaluate_pp7_ds3.py) increased the dataset entries to 224609. Training (my_evaluate_train16_ds3_seg.py). Stored as evaluate_ts15_ds3_Class6_csegEF224k.h5. Losses are lower than 100k but steering doesn't work. Need to check further. Also the training after epoch 30, goes up and down. So trying to reduce the learning rate to 10^-5.

b) Same as a. Load a model, reduce the learning rate to 10^-5. (my_evaluate_train16_ds3_seg.py) . Store as evaluate_ts15_ds3_Class6_csegEF224k1.h5 . This didn't work cos of custom loss function. Due to lack of time, running the training again with learning rate scheduler. Rate scheduler was a big pain. The problem was tf.math.exp. Now using float value directly. Changing lr wevery 15 epochs.


c) Now try to continue b) with 10^-5.  (my_evaluate_train16_ds3_seg.py) . Store as evaluate_ts15_ds3_Class6_csegEF224k2.h5

d) since 10^-5 didn;t work as inteded. Going back to 10^-4. Save as evaluate_ts15_ds3_Class6_csegEF224k3.h5.

e) Still not reduced. Why not try a higher lr? 10^-3? evaluate_ts15_ds3_Class6_csegEF224k4.h5

f) more training. save as evaluate_ts15_ds3_Class6_csegEF224k5.h5

g) continuing for more save as evaluate_ts15_ds3_Class6_csegEF224k6.h5


h) evaluate_ts15_ds3_Class6_csegEF224k7.h5, Learning rate reduction every 20 epochs by half. Loss rises after 28 epochs. So need to another training with only one learning rate.

i) After epoch 20, reduce it to 10^-5. save as evaluate_ts15_ds3_Class6_csegEF224k8.h5

j) Load evaluate_ts15_ds3_Class6_csegEF224k8.h5 and try with 10-4 again. store as evaluate_ts15_ds3_Class6_csegEF224k9.h5

------------
velocity as aux input
a)Using my_evaluate_train16a_ds3_seg.py. Multiple inputs. Single LR 10-4. Concate both after flatten. After help from Shawan. Was able to do the training. Classification loss smaller than previous cases but still rises after 20 epochs. Store as evaluate_ts15_ds3_Class6_csegEF224kvel1.h5

b) Learning rate decay. After 20 epochs, reduced the LR. Then after 55, increase by half. Save as evaluate_ts15_ds3_Class6_csegEF224kvel2.h5

c)

Cos of custom cost, the velocity is too small. How about a training with only normal cost? save as evaluate_ts15_ds3_Class6_csegEF224kvel4.h5


Layer (type)                 Output Shape              Param #   
=================================================================
input_1 (InputLayer)         (None,15, 70, 160, 1)        0         
_________________________________________________________________
lambda_1 (Lambda)            (None,15, 70, 160, 1)        0         
_________________________________________________________________
conv2d_1 (Conv2D)            (None,15, 35, 80, 24)        624       
_________________________________________________________________
conv2d_2 (Conv2D)            (None,15, 18, 40, 36)        21636     
_________________________________________________________________
conv2d_3 (Conv2D)            (None,15, 9, 20, 48)         43248     
_________________________________________________________________
conv2d_4 (Conv2D)            (None,15, 5, 10, 64)         27712     
_________________________________________________________________
conv2d_5 (Conv2D)            (None,15, 3, 5, 64)          36928     
_________________________________________________________________
flatten_1 (Flatten)          (None,15, 960)               0         
_________________________________________________________________
dense_1 (Dense)              (None, 100)               96100     
_________________________________________________________________
dense_2 (Dense)              (None, 50)                5050      
_________________________________________________________________
dense_3 (Dense)              (None, 10)                510       
_________________________________________________________________
st (Dense)                   (None, 1)                 11        
=================================================================
Total params: 231,819
Trainable params: 231,819
Non-trainable params: 0

evaluate_ts15_ds3_Class5_conv1.hd5

Number of images: (100923, 15, 70, 160, 1)
Number of labels: (100923, 5)
Splitting data into training set and testing set....at Sun Oct 11 20:59:03 2020
Splitting data into training set and testing end....at Sun Oct 11 20:59:05 2020
X_train shape: (80738, 15, 70, 160, 1)
Y_train shape: (80738, 5)
X_test shape: (20185, 15, 70, 160, 1)
Y_test shape: (20185, 5)
Model: "evaluate_ts15_ds3_Class5_conv1"
__________________________________________________________________________________________________
Layer (type)                    Output Shape         Param #     Connected to                     
==================================================================================================
input_1 (InputLayer)            (None, 15, 70, 160,  0                                            
__________________________________________________________________________________________________
lambda_1 (Lambda)               (None, 15, 70, 160,  0           input_1[0][0]                    
__________________________________________________________________________________________________
time_distributed_1 (TimeDistrib (None, 15, 35, 80, 2 624         lambda_1[0][0]                   
__________________________________________________________________________________________________
time_distributed_2 (TimeDistrib (None, 15, 18, 40, 3 21636       time_distributed_1[0][0]         
__________________________________________________________________________________________________
time_distributed_3 (TimeDistrib (None, 15, 9, 20, 48 43248       time_distributed_2[0][0]         
__________________________________________________________________________________________________
time_distributed_4 (TimeDistrib (None, 15, 5, 10, 64 27712       time_distributed_3[0][0]         
__________________________________________________________________________________________________
time_distributed_5 (TimeDistrib (None, 15, 3, 5, 80) 46160       time_distributed_4[0][0]         
__________________________________________________________________________________________________
time_distributed_6 (TimeDistrib (None, 15, 2, 3, 96) 69216       time_distributed_5[0][0]         
__________________________________________________________________________________________________
time_distributed_7 (TimeDistrib (None, 15, 576)      0           time_distributed_6[0][0]         
__________________________________________________________________________________________________
lstm_1 (LSTM)                   (None, 15, 200)      621600      time_distributed_7[0][0]         
__________________________________________________________________________________________________
lstm_2 (LSTM)                   (None, 100)          120400      lstm_1[0][0]                     
__________________________________________________________________________________________________
lstm_3 (LSTM)                   (None, 100)          120400      lstm_1[0][0]                     
__________________________________________________________________________________________________
lstm_4 (LSTM)                   (None, 100)          120400      lstm_1[0][0]                     
__________________________________________________________________________________________________
dense_1 (Dense)                 (None, 100)          10100       lstm_2[0][0]                     
__________________________________________________________________________________________________
dense_2 (Dense)                 (None, 100)          10100       lstm_3[0][0]                     
__________________________________________________________________________________________________
dense_3 (Dense)                 (None, 100)          10100       lstm_4[0][0]                     
__________________________________________________________________________________________________
dense_4 (Dense)                 (None, 10)           1010        dense_1[0][0]                    
__________________________________________________________________________________________________
dense_5 (Dense)                 (None, 10)           1010        dense_2[0][0]                    
__________________________________________________________________________________________________
dense_6 (Dense)                 (None, 10)           1010        dense_3[0][0]                    
__________________________________________________________________________________________________
classification (Dense)          (None, 3)            33          dense_4[0][0]                    
__________________________________________________________________________________________________
velocity (Dense)                (None, 1)            11          dense_5[0][0]                    
__________________________________________________________________________________________________
st (Dense)                      (None, 1)            11          dense_6[0][0]                    
==================================================================================================
Total params: 1,224,781
Trainable params: 1,224,781
Non-trainable params: 0
___________________________


With no traffic - 
Drive for 1 hour and see how model responds.
With traffic -
drive for 1 hout and see how model responds.

Epoch training - 50

velocity goes to  data.twist.angular.y